%% TopoMapCalculator
% Determines the topomap using the degraded image generated by
% 1Preprocessing.ijm

clear all
close all

%% Prerequisite //////////////////////////////////////////////////////////
% Run 1Preprocessing.ijm first
% /////////////////////////////////////////////////////////////////////////


%% Parameters ////////////////////////////////////////////////////////////
% Path where to find output images of 1Preprocessing.ijm
Paths={'D:\ProjectionApicalBasalSurface\Data'}; % To run the example, needs to end with 'ProjectionApicalBasalSurface\Data'

% Projection parameters
% For Apical projection
ApicalShift1=2;
BasalShift1=8;
% For basal projection
ApicalShift2=-10;
BasalShift2=40;
% Example : for projecting the 3 planes centered around the topomap, put
% ApicalShift=1 and BasalShift=1

% First peak height threshold
PeakThreshold=10000;

% Multiplication factor for topomap saving
Topomultiplication=500;
% /////////////////////////////////////////////////////////////////////////


%% CODE ///////////////////////////////////////////////////////////////////
for session=1:length(Paths)
    Path=Paths{session};
    PathOut=[Path filesep 'Projected'];
    mkdir(PathOut);

    % Detecting all the 'tif' files in the folder TopoMapDetection
    files = dir(fullfile([Path filesep 'TopoMapDetection'], '*.tif'));
    Names=[];
    for i=1:length(files)
        Names{i}=files(i).name;
    end
    
    % Creating the output folders
    PathOutTopo=[PathOut filesep 'zmap'];
    mkdir(PathOutTopo);
    PathOutProjectionApical=[PathOut filesep 'ProjectionApical'];
    mkdir(PathOutProjectionApical);
    PathOutProjectionBasal=[PathOut filesep 'ProjectionBasal'];
    mkdir(PathOutProjectionBasal);
    
    tic
    parfor i=1:length(Names)
        Name=Names{i};
        
        %% Opening raw image
        % Reading image
        FileTif=[Path filesep filesep Name];
        InfoImage=imfinfo(FileTif);
        mImage=InfoImage(1).Width;
        nImage=InfoImage(1).Height;
        NumberImages=length(InfoImage);
        ImageRaw=zeros(nImage,mImage,NumberImages,'uint16');
        TifLink = Tiff(FileTif, 'r');
        for j=1:NumberImages
            TifLink.setDirectory(j);
            ImageRaw(:,:,j)=TifLink.read();
        end
        TifLink.close();
        
        % Calculating width and height of the image
        Height=size(ImageRaw,1);
        Width=size(ImageRaw,2);
        
        %% Topomap calculation
        % Reading image
        FileTif=[Path filesep 'TopoMapDetection' filesep Name];
        InfoImage=imfinfo(FileTif);
        mImage=InfoImage(1).Width;
        nImage=InfoImage(1).Height;
        NumberImages=length(InfoImage);
        Image=zeros(nImage,mImage,NumberImages,'uint32');
        TifLink = Tiff(FileTif, 'r');
        for j=1:NumberImages
            TifLink.setDirectory(j);
            Image(:,:,j)=TifLink.read();
        end
        TifLink.close();
        
        % Detection of basal or apical plane location for each pixel
        Topomap=nan(size(Image,1),size(Image,2));
        for x=1:size(Image,1)
            for y=1:size(Image,2)
                
                Vect=squeeze(Image(x,y,:));
                [locs pks]=peakseek(Vect,2,PeakThreshold);
                if ~isempty(locs)
                    Topomap(x,y)=locs(1);
                else
                    [locs pks]=peakseek(Vect,2,PeakThreshold/2);
                    if ~isempty(locs)
                        Topomap(x,y)=locs(1);
                    else
                        [locs pks]=peakseek(Vect,2,PeakThreshold/4);
                        if ~isempty(locs)
                            Topomap(x,y)=locs(1);
                        else
                            [locs pks]=peakseek(Vect,2,PeakThreshold/8);
                            if ~isempty(locs)
                                Topomap(x,y)=locs(1);
                            end
                        end
                    end
                end
            end
        end
        
        % Smoothing of the topomap
        TopomapSmoothed=movmean(Topomap,3,1,'omitnan');
        TopomapSmoothed=movmean(TopomapSmoothed,3,2,'omitnan');
        
        % Interpolation of the topomap
        [X,Y] = meshgrid(1:size(Image,2),1:size(Image,1));
        [Xq,Yq] = meshgrid(linspace(1,size(Image,2),Width),linspace(1,size(Image,1),Height));
        Topo=interp2(X,Y,TopomapSmoothed,Xq,Yq);
        
        % Saving the topomap
        imwrite(Topomultiplication*uint16(Topo),[PathOutTopo filesep Name]);
        
        % Following evolution
        disp([num2str(i) '/' num2str(length(Names)) ' calculated topo maps.']);
        
        
        %% Apical projection
        Projection=zeros(size(ImageRaw,1),size(ImageRaw,2));
        MaxZ=size(ImageRaw,3);
        for x=1:size(Projection,1)
            for y=1:size(Projection,2)
                % Only calculating projection for non-NaN topomap values
                if ~isnan(Topo(x,y))
                    % Checking whether projection is out of edges of the image
                    Begin=round(Topo(x,y)-ApicalShift1);
                    if Begin<1
                        Begin=1;
                    end
                    if Begin>MaxZ
                        Begin=MaxZ;
                    end
                    End=round(Topo(x,y)+BasalShift1);
                    if End<1
                        End=1;
                    end
                    if End>MaxZ
                        End=MaxZ;
                    end
                    
                    % Projection
                    Projection(x,y)=nanmax(ImageRaw(x,y,Begin:End));
                end
            end
        end
        % Saving projection
        imwrite(uint16(Projection),[PathOutProjectionApical filesep Name]);
        
        %% Basal projection
        Projection=zeros(size(ImageRaw,1),size(ImageRaw,2));
        MaxZ=size(ImageRaw,3);
        for x=1:size(Projection,1)
            for y=1:size(Projection,2)
                % Only calculating projection for non-NaN topomap values
                if ~isnan(Topo(x,y))
                    % Checking whether projection is out of edges of the image
                    Begin=round(Topo(x,y)-ApicalShift2);
                    if Begin<1
                        Begin=1;
                    end
                    if Begin>MaxZ
                        Begin=MaxZ;
                    end
                    End=round(Topo(x,y)+BasalShift2);
                    if End<1
                        End=1;
                    end
                    if End>MaxZ
                        End=MaxZ;
                    end
                    
                    % Projection
                    Projection(x,y)=nanmax(ImageRaw(x,y,Begin:End));
                end
            end
        end
        % Saving projection
        imwrite(uint16(Projection),[PathOutProjectionBasal filesep Name]);
        
        % Following evolution
        disp([num2str(i) '/' num2str(length(Names)) ' projection done.']);
    end
    t=toc;
    disp(['Total calculation time = ' num2str(t/3600) 'h']);
end